$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Just
scopeName: source.just
fileTypes: [just, justfile, Justfile]
firstLineMatch: "#![\\s\\t]*\\/.*\\just\\b"
uuid: 8b0cfae0-229f-4688-a4b7-8b5c3db82855

patterns:
  - include: '#comments'
  - include: '#import'
  - include: '#module'
  - include: '#alias'
  - include: '#assignment'
  - include: '#builtins'
  - include: '#keywords'
  - include: '#expression-operators'
  - include: '#backtick'
  - include: '#strings'
  - include: '#parenthesis'
  - include: '#recipes'
  - include: '#recipe-operators'
  - include: '#embedded-languages'
  - include: '#escaping'

repository:
  comments:
    patterns:
      - name: comment.line.number-sign.just
        match: '#([^!].*)$'

  import:
    begin: |
      (?x)
        ^
        (import)
        (\?)? \s+
    end: $
    beginCaptures:
      '1':
        name: keyword.other.reserved.just
      '2':
        name: punctuation.optional.just
    patterns:
      - include: '#strings'

  module:
    begin: |
      (?x)
        ^
        (mod)
        (\?)? \s+
        ([a-zA-Z_][a-zA-Z0-9_-]*)
        (?=[$\s])
    end: $
    beginCaptures:
      '1':
        name: keyword.other.reserved.just
      '2':
        name: punctuation.optional.just
      '3':
        name: variable.name.module.just
    patterns:
      - include: '#strings'

  alias:
    match: |
      (?x)
        ^
        (alias) \s+ 
        ([a-zA-Z_][a-zA-Z0-9_-]*) \s* 
        (:=) \s* 
        ([a-zA-Z_][a-zA-Z0-9_-]*)
    captures:
      '1':
        name: keyword.other.reserved.just
      '2':
        name: variable.name.alias.just
      '3':
        name: keyword.operator.assignment.just
      '4':
        name: variable.other.just

  assignment:
    patterns:
      - include: '#variable-assignment'
      - include: '#setting-assignment'

  variable-assignment:
    patterns:
      - begin: |
          (?x) 
            ^
            (?: (export) \s+)?
            ([a-zA-Z_][a-zA-Z0-9_-]*) \s*
            (:=)
        end: $
        beginCaptures:
          '1':
            name: keyword.other.reserved.just
          '2':
            name: variable.other.just
          '3':
            name: keyword.operator.assignment.just
        patterns:
          - include: '#expression'

  setting-assignment:
    patterns:
      - begin: |
          (?x) 
            ^
            (set) \s+
            ([a-zA-Z_][a-zA-Z0-9_-]*) \s*
            (:=)?
        end: $
        beginCaptures:
          '1':
            name: keyword.other.reserved.just
          '2':
            name: variable.other.just
          '3':
            name: keyword.operator.assignment.just
        patterns:
          # Allow any expression here for simplicity right now
          - include: '#expression'

  expression:
    patterns:
      - include: '#backtick'
      - include: '#builtins'
      - include: '#control-keywords'
      - include: '#expression-operators'
      - include: '#parenthesis'
      - include: '#strings'
      # - include: '#expression'

  builtins:
    patterns:
      - name: constant.language.hex.just
        match: \b(HEX|HEXLOWER|HEXUPPER)\b
      - include: '#builtin-functions'
      - include: '#literal'

  builtin-functions:
    patterns:
      - name: support.function.builtin.just
        match: |
          (?x) \b(
            arch|num_cpus|os|os_family|shell|env_var|env_var_or_default|env|
            is_dependency|invocation_directory|invocation_dir|invocation_directory_native|
            invocation_dir_native|justfile|justfile_directory|justfile_dir|just_executable|
            just_pid|source_file|source_directory|source_dir|module_file|module_directory|
            module_dir|append|prepend|encode_uri_component|quote|replace|replace_regex|
            trim|trim_end|trim_end_match|trim_end_matches|trim_start|trim_start_match|
            trim_start_matches|capitalize|kebabcase|lowercamelcase|lowercase|
            shoutykebabcase|shoutysnakecase|snakecase|titlecase|uppercamelcase|
            uppercase|absolute_path|blake3|blake3_file|canonicalize|extension|
            file_name|file_stem|parent_directory|parent_dir|without_extension|clean|join|
            path_exists|error|assert|sha256|sha256_file|uuid|choose|datetime|
            datetime_utc|semver_matches|cache_directory|cache_dir|config_directory|config_dir|
            config_local_directory|config_local_dir|data_directory|data_dir|data_local_directory|
            data_local_dir|executable_directory|executable_dir|home_directory|home_dir
          )\b

  literal:
    patterns:
      - include: '#boolean'
      - include: '#number'

  boolean:
    patterns:
      - name: constant.language.boolean.just
        match: \b(true|false)\b

  number:
    patterns:
      - name: constant.numeric.just
        match: |
          (?x)
            (?<! [a-zA-Z_\-])(?:
              \. \d+
              |
              \d+ \. \d+
              |
              \d+ \.
              |
              [1-9] \d*
            )
      - name: invalid.illegal.name.just
        match: \b[0-9]+[a-zA-Z_\-]+\b

  keywords:
    patterns:
      - include: '#reserved-keywords'
      - include: '#control-keywords'

  reserved-keywords:
    patterns:
      - match: "^(alias|export|import|mod|set)\\s+"
        captures:
          '1':
            name: keyword.other.reserved.just

  control-keywords:
    patterns:
      - name: keyword.control.conditional.just
        match: "\\b(if|else)\\b"

  parenthesis:
    begin: \(
    end: \)
    patterns:
      - include: '#expression'
      - include: '#parenthesis'

  expression-operators:
    patterns:
      - name: keyword.operator.path-join.just
        match: "\\/"
      - name: keyword.operator.concat.just
        match: "\\+"
      - name: keyword.operator.and.just
        match: '&&'
      - name: keyword.operator.equality.just
        match: "(\\=\\=|\\=\\~|\\!\\=)"

  backtick:
    patterns:
      - comment: Indented
        begin: '(```)'
        end: '(```)'
        beginCaptures:
          '1':
            name: string.interpolated.just
        endCaptures:
          '1':
            name: string.interpolated.just
        contentName: source.shell
        patterns:
          - include: source.shell
      - comment: Standard
        match: '(`)([^`]*)(`)'
        captures:
          '1':
            name: string.interpolated.just
          '2':
            name: source.shell
            patterns:
              - include: source.shell
          '3':
            name: string.interpolated.just

  strings:
    patterns:
      - comment: Non-escaped curly braces in string
        name: string.quoted.double.indented.just
        match: ([\"']{1,3})[\{]+(\1)
      - comment: Indented string
        name: string.quoted.double.indented.just
        begin: '(x)?(""")'
        end: '"""'
        beginCaptures:
          '1':
            name: constant.character.expanded.just
          '2':
            name: string.quoted.double.indented.just
        patterns:
          - comment: Escaped characters
            name: constant.character.escape.just
            match: "\\\\.(?:(?<=u)\\{.+?\\})?"
          - include: '#escaping'
      - comment: String
        name: string.quoted.double.just
        begin: '(x)?(")'
        end: '"'
        beginCaptures:
          '1':
            name: constant.character.expanded.just
          '2':
            name: string.quoted.double.just
        patterns:
          - comment: Escaped characters
            name: constant.character.escape.just
            match: "\\\\.(?:(?<=u)\\{.+?\\})?"
          - include: '#escaping'
      - comment: Indented raw string
        name: string.quoted.single.indented.just
        begin: "(x)?(''')"
        end: "'''"
        beginCaptures:
          '1':
            name: constant.character.expanded.just
          '2':
            name: string.quoted.single.indented.just
        patterns:
          - include: '#escaping'
      - comment: Raw string
        name: string.quoted.single.just
        begin: "(x)?(')"
        end: "'"
        beginCaptures:
          '1':
            name: constant.character.expanded.just
          '2':
            name: string.quoted.single.just
        patterns:
          - include: '#escaping'

  escaping:
    patterns:
      - name: string.interpolated.escaping.just
        match: |
          (?x)
            (?<!\{)
            (\{\{)
              \{? (?!\{)
              (.*?)
            (\}\})
        captures:
          '1':
            name: string.interpolated.escape.just
          '2':
            patterns:
              - include: '#expression'
          '3':
            name: string.interpolated.escape.just

  recipes:
    patterns:
      - match: |
          (?x)
            ^
            (@_|_@|@|_)?
            ([a-zA-Z][a-zA-Z0-9_\-]*)
            (?: \s+ (.*?) )?
            \s* (:)
            (.*)
        captures:
          '1':
            name: keyword.other.recipe.prefix.just
          '2':
            name: entity.name.function.just
          '3':
            patterns:
              - include: '#recipe-params'
          '4':
            name: keyword.operator.recipe.end.just
          '5':
            patterns:
              - include: '#recipe-dependencies'
      - include: '#recipe-operators'
      - include: '#recipe-attributes'
      - include: '#embedded-languages'

  recipe-operators:
    patterns:
      - match: "^\\s+(@)"
        captures:
          '1':
            name: keyword.operator.quiet.just
      - match: "^\\s+(\\-)"
        captures:
          '1':
            name: keyword.operator.error-suppression.just

  recipe-attributes:
    patterns:
      - comment: Multiple recipe attributes
        match: |
          (?x)
            ^
            \[ 
              ([a-zA-z\-]+) \s*
              (?: , ( \s* [a-zA-z\-]+ \s* ) )*
            ] \s*
            $
        captures:
          '1':
            name: support.function.system.just
          '2':
            name: support.function.system.just
      - comment: Recipe attribute with value
        match: |
          (?x)
            ^
            \[
              ([a-zA-z\-]+)
              (?: 
                (?: (:) (.*?) ) | (\( (.*?) \))
              )?
            ] \s*
            $
        captures:
          '1':
            name: support.function.system.just
          '2':
            name: keyword.operator.attribute.end.just
          '3':
            patterns:
              - include: '#strings'
          '4':
            patterns:
              - include: '#strings'

  recipe-params:
    comment: Recipe parameters
    match: |
      (?x)
        (?: 
          (\+|\*|\$)?
          ([a-zA-Z_][a-zA-Z_0-9]*
        )
        (?:
          (=)
          (?: 
            [a-zA-Z_][a-zA-Z_0-9]* 
            | (\".*?\" | '.*?') 
            | (`.*?`) 
            | ( \( 
                (?: 
                  [^\(\)]+ 
                  | \( [^)]* \)
                )* \) ) 
              ) 
          )?
        )
    captures:
      '1':
        name: keyword.other.recipe.variadic.just
      '2':
        name: variable.parameter.recipe.just
      '3':
        name: keyword.operator.default.just
      '4':
        patterns:
          - include: '#strings'
      '5':
        patterns:
          - include: '#backtick'
      '6':
        patterns:
          - include: '#parenthesis'

  recipe-dependencies:
    comment: Recipe dependencies
    match: |
      (?x)
        (?:
          ([a-zA-Z_][a-zA-Z0-9_\-]*)
          | ( \( 
              (?: [^\(\)]+ | \( [^\)]* \))* 
            \) )
          | (&&)
        )
    captures:
      '1':
        name: entity.name.function.just
      '2':
        patterns:
          - comment: Recipe with default values
            match: |
              (?x)
                \( 
                  (?: 
                    ([a-zA-Z_][a-zA-Z0-9_\-]*)
                    (.*)
                  )
                \)
            captures:
              '1':
                name: entity.name.function.just
              '2':
                patterns:
                  - include: '#expression'
      '3':
        name: keyword.operator.and.just

  embedded-languages:
    patterns:
      - comment: JavaScript
        begin: "^\\s+(#!/usr/bin/env\\s+node.*)$"
        end: ^$
        beginCaptures:
          '1':
            name: comment.line.number-sign.shebang.just
        contentName: source.js
        patterns:
          - include: source.js
      - comment: Perl
        begin: "^\\s+(#!/usr/bin/env\\s+perl.*)$"
        end: ^$
        beginCaptures:
          '1':
            name: comment.line.number-sign.shebang.just
        contentName: source.perl
        patterns:
          - include: source.perl
      - comment: Python
        begin: "^\\s+(#!/usr/bin/env\\s+python.*)$"
        end: ^$
        beginCaptures:
          '1':
            name: comment.line.number-sign.shebang.just
        contentName: source.python
        patterns:
          - include: source.python
      - comment: Ruby
        begin: "^\\s+(#!/usr/bin/env\\s+ruby.*)$"
        end: ^$
        beginCaptures:
          '1':
            name: comment.line.number-sign.shebang.just
        contentName: source.ruby
        patterns:
          - include: source.ruby
      - comment: Shell
        begin: "^\\s+(#!/usr/bin/env\\s+(?:sh|bash|zsh|fish).*)$"
        end: ^$
        beginCaptures:
          '1':
            name: comment.line.number-sign.shebang.just
        contentName: source.shell
        patterns:
          - include: source.shell
