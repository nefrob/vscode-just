{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Just",
  "scopeName": "source.just",
  "fileTypes": [
    "just",
    "justfile",
    "Justfile"
  ],
  "firstLineMatch": "#![\\s\\t]*\\/.*\\just\\b",
  "uuid": "8b0cfae0-229f-4688-a4b7-8b5c3db82855",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#import"
    },
    {
      "include": "#module"
    },
    {
      "include": "#alias"
    },
    {
      "include": "#assignment"
    },
    {
      "include": "#builtins"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#backtick"
    },
    {
      "include": "#embedded-languages"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#escaping"
    },
    {
      "include": "#recipes"
    },
    {
      "include": "#parenthesis"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.just",
          "match": "#([^!].*)$"
        }
      ]
    },
    "import": {
      "begin": "(?x)\n  ^\n  (import)\n  (\\?)? \\s+\n",
      "end": "$",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.reserved.just"
        },
        "2": {
          "name": "keyword.operator.optional.just"
        }
      },
      "patterns": [
        {
          "include": "#strings"
        }
      ]
    },
    "module": {
      "begin": "(?x)\n  ^\n  (mod)\n  (\\?)? \\s+\n  ([a-zA-Z_][a-zA-Z0-9_-]*)\n  (?=[$\\s])\n",
      "end": "$",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.reserved.just"
        },
        "2": {
          "name": "keyword.operator.optional.just"
        },
        "3": {
          "name": "variable.name.module.just"
        }
      },
      "patterns": [
        {
          "include": "#strings"
        }
      ]
    },
    "alias": {
      "match": "(?x)\n  ^\n  (alias) \\s+ \n  ([a-zA-Z_][a-zA-Z0-9_-]*) \\s* \n  (:=) \\s* \n  ([a-zA-Z_][a-zA-Z0-9_-]*)\n",
      "captures": {
        "1": {
          "name": "keyword.other.reserved.just"
        },
        "2": {
          "name": "variable.name.alias.just"
        },
        "3": {
          "name": "keyword.operator.assignment.just"
        },
        "4": {
          "name": "variable.other.just"
        }
      }
    },
    "assignment": {
      "patterns": [
        {
          "include": "#variable-assignment"
        },
        {
          "include": "#setting-assignment"
        }
      ]
    },
    "variable-assignment": {
      "patterns": [
        {
          "begin": "(?x) \n  ^\n  (?: (export) \\s+)?\n  ([a-zA-Z_][a-zA-Z0-9_-]*) \\s*\n  (:=)\n",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.reserved.just"
            },
            "2": {
              "name": "variable.other.just"
            },
            "3": {
              "name": "keyword.operator.assignment.just"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "setting-assignment": {
      "patterns": [
        {
          "begin": "(?x) \n  ^\n  (set) \\s+\n  ([a-zA-Z_][a-zA-Z0-9_-]*) \\s*\n  (:=)?\n",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.reserved.just"
            },
            "2": {
              "name": "variable.other.just"
            },
            "3": {
              "name": "keyword.operator.assignment.just"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#backtick"
        },
        {
          "include": "#builtins"
        },
        {
          "include": "#control-keywords"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#parenthesis"
        },
        {
          "include": "#strings"
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "name": "constant.language.hex.just",
          "match": "\\b(HEX|HEXLOWER|HEXUPPER)\\b"
        },
        {
          "include": "#builtin-functions"
        },
        {
          "include": "#literal"
        }
      ]
    },
    "builtin-functions": {
      "patterns": [
        {
          "name": "support.function.builtin.just",
          "match": "(?x) \\b(\n  arch|num_cpus|os|os_family|shell|env_var|env_var_or_default|env|\n  is_dependency|invocation_directory|invocation_directory_native|\n  justfile|justfile_directory|just_executable|just_pid|source_file|\n  source_directory|module_file|module_directory|append|prepend|\n  encode_uri_component|quote|replace|replace_regex|trim|trim_end|\n  trim_end_match|trim_end_matches|trim_start|trim_start_match|\n  trim_start_matches|capitalize|kebabcase|lowercamelcase|lowercase|\n  shoutykebabcase|shoutysnakecase|snakecase|titlecase|uppercamelcase|\n  uppercase|absolute_path|blake3|blake3_file|canonicalize|extension|\n  file_name|file_stem|parent_directory|without_extension|clean|join|\n  path_exists|error|assert|sha256|sha256_file|uuid|choose|datetime|\n  datetime_utc|semver_matches|cache_directory|config_directory|\n  config_local_directory|data_directory|data_local_directory|\n  executable_directory|home_directory\n)\\b\n"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "include": "#boolean"
        },
        {
          "include": "#number"
        }
      ]
    },
    "boolean": {
      "patterns": [
        {
          "name": "constant.language.boolean.just",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.just",
          "match": "(?x)\n  (?<! [a-zA-Z_\\-])(?:\n    \\. \\d+\n    |\n    \\d+ \\. \\d+\n    |\n    \\d+ \\.\n    |\n    [1-9] \\d*\n  )\n"
        },
        {
          "name": "invalid.illegal.name.just",
          "match": "\\b[0-9]+[a-zA-Z_\\-]+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "include": "#reserved-keywords"
        },
        {
          "include": "#control-keywords"
        }
      ]
    },
    "reserved-keywords": {
      "patterns": [
        {
          "match": "^(alias|export|import|mod|set)\\s+",
          "captures": {
            "1": {
              "name": "keyword.other.reserved.just"
            }
          }
        }
      ]
    },
    "control-keywords": {
      "patterns": [
        {
          "name": "keyword.control.conditional.just",
          "match": "\\b(if|else)\\b"
        }
      ]
    },
    "parenthesis": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#parenthesis"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "comment": "Path join",
          "name": "keyword.operator.path-join.just",
          "match": "\\/"
        },
        {
          "comment": "Concatenation",
          "name": "keyword.operator.concat.just",
          "match": "\\+"
        },
        {
          "comment": "And",
          "name": "keyword.operator.and.just",
          "match": "&&"
        },
        {
          "comment": "Equality",
          "name": "keyword.operator.equality.just",
          "match": "(\\=\\=|\\=\\~|\\!\\=)"
        },
        {
          "comment": "Quiet",
          "match": "^\\s+(@)",
          "captures": {
            "1": {
              "name": "keyword.operator.quiet.just"
            }
          }
        },
        {
          "comment": "Error suppression",
          "match": "^\\s+(\\-)",
          "captures": {
            "1": {
              "name": "keyword.operator.error-suppression.just"
            }
          }
        }
      ]
    },
    "backtick": {
      "patterns": [
        {
          "comment": "Indented",
          "begin": "(```)",
          "end": "(```)",
          "beginCaptures": {
            "1": {
              "name": "string.interpolated.just"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string.interpolated.just"
            }
          },
          "contentName": "source.shell",
          "patterns": [
            {
              "include": "source.shell"
            }
          ]
        },
        {
          "comment": "Standard",
          "match": "(`)([^`]*)(`)",
          "captures": {
            "1": {
              "name": "string.interpolated.just"
            },
            "2": {
              "name": "source.shell",
              "patterns": [
                {
                  "include": "source.shell"
                }
              ]
            },
            "3": {
              "name": "string.interpolated.just"
            }
          }
        }
      ]
    },
    "embedded-languages": {
      "patterns": [
        {
          "comment": "JavaScript",
          "begin": "^\\s+#!/usr/bin/env\\s+node.*$",
          "end": "^$",
          "contentName": "source.js",
          "patterns": [
            {
              "include": "source.js"
            }
          ]
        },
        {
          "comment": "Perl",
          "begin": "^\\s+#!/usr/bin/env\\s+perl.*$",
          "end": "^$",
          "contentName": "source.perl",
          "patterns": [
            {
              "include": "source.perl"
            }
          ]
        },
        {
          "comment": "Python",
          "begin": "^\\s+#!/usr/bin/env\\s+python.*$",
          "end": "^$",
          "contentName": "source.python",
          "patterns": [
            {
              "include": "source.python"
            }
          ]
        },
        {
          "comment": "Ruby",
          "begin": "^\\s+#!/usr/bin/env\\s+ruby.*$",
          "end": "^$",
          "contentName": "source.ruby",
          "patterns": [
            {
              "include": "source.ruby"
            }
          ]
        },
        {
          "comment": "Shell",
          "begin": "^\\s+#!/usr/bin/env\\s+(sh|bash|zsh|fish).*$",
          "end": "^$",
          "contentName": "source.shell",
          "patterns": [
            {
              "include": "source.shell"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "comment": "Non-escaped curly braces in string",
          "name": "string.quoted.double.indented.just",
          "match": "([\"']{1,3})[\\{]+(\\1)"
        },
        {
          "comment": "Indented string",
          "name": "string.quoted.double.indented.just",
          "begin": "(x)?(\"\"\")",
          "end": "\"\"\"",
          "beginCaptures": {
            "1": {
              "name": "constant.character.expanded.just"
            },
            "2": {
              "name": "string.quoted.double.indented.just"
            }
          },
          "patterns": [
            {
              "comment": "Escaped characters",
              "name": "constant.character.escape.just",
              "match": "\\\\."
            },
            {
              "include": "#escaping"
            }
          ]
        },
        {
          "comment": "String",
          "name": "string.quoted.double.just",
          "begin": "(x)?(\")",
          "end": "\"",
          "beginCaptures": {
            "1": {
              "name": "constant.character.expanded.just"
            },
            "2": {
              "name": "string.quoted.double.just"
            }
          },
          "patterns": [
            {
              "comment": "Escaped characters",
              "name": "constant.character.escape.just",
              "match": "\\\\."
            },
            {
              "include": "#escaping"
            }
          ]
        },
        {
          "comment": "Indented raw string",
          "name": "string.quoted.single.indented.just",
          "begin": "(x)?(''')",
          "end": "'''",
          "beginCaptures": {
            "1": {
              "name": "constant.character.expanded.just"
            },
            "2": {
              "name": "string.quoted.single.indented.just"
            }
          },
          "patterns": [
            {
              "include": "#escaping"
            }
          ]
        },
        {
          "comment": "Raw string",
          "name": "string.quoted.single.just",
          "begin": "(x)?(')",
          "end": "'",
          "beginCaptures": {
            "1": {
              "name": "constant.character.expanded.just"
            },
            "2": {
              "name": "string.quoted.single.just"
            }
          },
          "patterns": [
            {
              "include": "#escaping"
            }
          ]
        }
      ]
    },
    "escaping": {
      "patterns": [
        {
          "comment": "Variable escaping",
          "name": "string.interpolated.escaping.just",
          "match": "(?<!\\{)(\\{\\{)\\{?(?!\\{)(.*?)(\\}\\})",
          "captures": {
            "1": {
              "name": "string.interpolated.escape.just"
            },
            "2": {
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            "3": {
              "name": "string.interpolated.escape.just"
            }
          }
        }
      ]
    },
    "recipe-attributes": {
      "patterns": [
        {
          "comment": "Multiple recipe attributes",
          "match": "^\\[([a-zA-z\\-]+)\\s*(?:,(\\s*[a-zA-z\\-]+\\s*))*]\\s*$",
          "captures": {
            "1": {
              "name": "support.function.system.just"
            },
            "2": {
              "name": "support.function.system.just"
            }
          }
        },
        {
          "comment": "Recipe attribute with value",
          "match": "^\\[([a-zA-z\\-]+)(?:(?:(:)(.*?))|(\\((.*?)\\)))?]\\s*$",
          "captures": {
            "1": {
              "name": "support.function.system.just"
            },
            "2": {
              "name": "keyword.operator.attribute.end.just"
            },
            "3": {
              "patterns": [
                {
                  "include": "#strings"
                }
              ]
            },
            "4": {
              "patterns": [
                {
                  "include": "#strings"
                }
              ]
            }
          }
        }
      ]
    },
    "recipe-params": {
      "comment": "Recipe parameters",
      "match": "(?:(\\+|\\*|\\$)?([a-zA-Z_][a-zA-Z_0-9]*)(?:(=)(?:[a-zA-Z_][a-zA-Z_0-9]*|(\".*?\"|'.*?')|(`.*?`)|(\\((?:[^()]+|\\([^)]*\\))*\\))))?)",
      "captures": {
        "1": {
          "name": "keyword.other.recipe.variadic.just"
        },
        "2": {
          "name": "variable.parameter.recipe.just"
        },
        "3": {
          "name": "keyword.operator.default.just"
        },
        "4": {
          "patterns": [
            {
              "include": "#strings"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "include": "#backtick"
            }
          ]
        },
        "6": {
          "patterns": [
            {
              "include": "#parenthesis"
            }
          ]
        }
      }
    },
    "recipe-dependencies": {
      "comment": "Recipe dependencies",
      "match": "(?:([a-zA-Z_][a-zA-Z0-9_\\-]*)|(\\((?:[^()]+|\\([^)]*\\))*\\))|(&&))",
      "captures": {
        "1": {
          "name": "entity.name.function.just"
        },
        "2": {
          "patterns": [
            {
              "comment": "Recipe with default values",
              "match": "\\((?:([a-zA-Z_][a-zA-Z0-9_\\-]*)(.*))\\)",
              "captures": {
                "1": {
                  "name": "entity.name.function.just"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#expression"
                    }
                  ]
                }
              }
            }
          ]
        },
        "3": {
          "name": "keyword.operator.and.just"
        }
      }
    },
    "recipes": {
      "patterns": [
        {
          "include": "#recipe-attributes"
        },
        {
          "comment": "Recipe definition",
          "match": "^(@_|_@|@|_)?([a-zA-Z][a-zA-Z0-9_\\-]*)(?:\\s+(.*))?\\s*(:)(.*)",
          "captures": {
            "1": {
              "name": "keyword.other.recipe.prefix.just"
            },
            "2": {
              "name": "entity.name.function.just"
            },
            "3": {
              "patterns": [
                {
                  "include": "#recipe-params"
                }
              ]
            },
            "4": {
              "name": "keyword.operator.recipe.end.just"
            },
            "5": {
              "patterns": [
                {
                  "include": "#recipe-dependencies"
                }
              ]
            }
          }
        }
      ]
    }
  }
}
